# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  VANILLA_CACHE: $(Pipeline.Workspace)/vanilla

name: '$(Build.BuildId)+$(Build.BuildIdOffset)'

steps:
# Pre-build steps.
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  displayName: 'Run .azure-pipelines/prebuild.ps1'
  inputs:
    filePath: '.azure-pipelines/prebuild.ps1'

# Build.
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'publish'
    publishWebProjects: false
    zipAfterPublish: false
    projects: '*/*.csproj'
    arguments: '--configuration $(buildConfiguration) "/p:Configuration=$(buildConfiguration)"'

# Create and "publish" main artifact.
- task: CopyFiles@2
  displayName: 'Pack main artifact: NETCoreifier'
  continueOnError: true
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/NETCoreifier/bin/Release/net7.0/publish'
    contents: '**'
    targetFolder: '$(Build.ArtifactStagingDirectory)/main/'
    cleanTargetFolder: true
    overWrite: true
    flattenFolders: false
- task: CopyFiles@2
  displayName: 'Pack main artifact: Celeste.Mod.mm'
  continueOnError: true
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/Celeste.Mod.mm/bin/Release/net7.0/publish'
    contents: '**'
    targetFolder: '$(Build.ArtifactStagingDirectory)/main/'
    cleanTargetFolder: false
    overWrite: true
    flattenFolders: false
- task: CopyFiles@2
  displayName: 'Pack main artifact: MiniInstaller'
  continueOnError: true
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/MiniInstaller/bin/Release/net7.0/publish'
    contents: '**'
    targetFolder: '$(Build.ArtifactStagingDirectory)/main/'
    cleanTargetFolder: false
    overWrite: true
    flattenFolders: false
- task: PublishBuildArtifacts@1
  displayName: 'Publish main artifact'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/main/'
    artifactName: 'main'
    publishLocation: 'Container'

# Verify patches.
- task: Cache@2
  displayName: Cache Vanilla files
  continueOnError: true
  inputs:
    key: '"lib-stripped" | "$(BIN_USERNAME)" | "$(BIN_PASSWORD)"'
    path: $(VANILLA_CACHE)
    cacheHitVar: CACHE_RESTORED
- task: PowerShell@2
  condition: succeeded()
  displayName: 'Verify patches'
  inputs:
    filePath: '.azure-pipelines/verify.ps1'
  env:
    BIN_URL: $(BIN_URL)
    BIN_USERNAME: $(BIN_USERNAME)
    BIN_PASSWORD: $(BIN_PASSWORD)

# Post-build steps.
- task: PowerShell@2
  name: PostBuild
  condition: succeeded()
  displayName: 'Run .azure-pipelines/postbuild.ps1'
  continueOnError: true
  inputs:
    filePath: '.azure-pipelines/postbuild.ps1'
  env:
    BIN_URL: $(BIN_URL)

# Create and "publish" Olympus artifacts.
- task: PublishBuildArtifacts@1
  condition: eq(variables['olympus'], 'True')
  displayName: 'Publish olympus-meta artifact'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/olympus/meta/'
    artifactName: 'olympus-meta'
    publishLocation: 'Container'
- task: PublishBuildArtifacts@1
  condition: eq(variables['olympus'], 'True')
  displayName: 'Publish olympus-build artifact'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/olympus/build/'
    artifactName: 'olympus-build'
    publishLocation: 'Container'

# Create and "publish" mono-cil-strip binary artifacts
- task: PublishBuildArtifacts@1
  condition: eq(variables['lib_stripped'], 'True')
  displayName: 'Publish lib-stripped artifact'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/lib-stripped/build/'
    artifactName: 'lib-stripped'
    publishLocation: 'Container'
